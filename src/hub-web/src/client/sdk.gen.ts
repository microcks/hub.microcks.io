// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetPackagesData, GetPackagesResponse, GetPackageData, GetPackageResponse, GetMocksByPackageApisData, GetMocksByPackageApisResponse, GetApiVersionData, GetApiVersionResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
};

/**
 * Get all APIPackages
 */
export const getPackages = <ThrowOnError extends boolean = false>(options?: Options<GetPackagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPackagesResponse, unknown, ThrowOnError>({
        url: '/mocks',
        ...options
    });
};

/**
 * Get APIPackage details
 */
export const getPackage = <ThrowOnError extends boolean = false>(options: Options<GetPackageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPackageResponse, unknown, ThrowOnError>({
        url: '/mocks/{package}',
        ...options
    });
};

export const getMocksByPackageApis = <ThrowOnError extends boolean = false>(options: Options<GetMocksByPackageApisData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMocksByPackageApisResponse, unknown, ThrowOnError>({
        url: '/mocks/{package}/apis',
        ...options
    });
};

/**
 * Get a specified API version
 */
export const getApiVersion = <ThrowOnError extends boolean = false>(options: Options<GetApiVersionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiVersionResponse, unknown, ThrowOnError>({
        url: '/mocks/{package}/apis/{apiVersion}',
        ...options
    });
};